// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-15, STEPS: `2`, REPEAT: 0, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_identity
// --extrinsic=*
// --execution=native
// --detailed-log-output
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    // Storage: Identity Registrars (r:1 w:1)
    fn add_registrar(_r: u32) -> Weight {
        Weight::from_ref_time(24_878_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity IdentityOf (r:1 w:1)
    fn set_identity(r: u32, x: u32) -> Weight {
        Weight::from_ref_time(16_251_000 as u64)
            // Standard Error: 1_209_000
            .saturating_add(Weight::from_ref_time(1_224_000 as u64).saturating_mul(r as u64))
            // Standard Error: 134_000
            .saturating_add(Weight::from_ref_time(420_000 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity SuperOf (r:1 w:1)
    fn set_subs_new(_s: u32) -> Weight {
        Weight::from_ref_time(159_589_000 as u64)
            .saturating_add(T::DbWeight::get().reads(66 as u64))
            .saturating_add(T::DbWeight::get().writes(65 as u64))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity SuperOf (r:0 w:1)
    fn set_subs_old(_p: u32) -> Weight {
        Weight::from_ref_time(94_693_000 as u64)
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(65 as u64))
    }
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity IdentityOf (r:1 w:1)
    // Storage: Identity SuperOf (r:0 w:64)
    fn clear_identity(_r: u32, s: u32, x: u32) -> Weight {
        Weight::from_ref_time(47_585_000 as u64)
            // Standard Error: 488_000
            .saturating_add(Weight::from_ref_time(1_121_000 as u64).saturating_mul(s as u64))
            // Standard Error: 488_000
            .saturating_add(Weight::from_ref_time(349_000 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
    // Storage: Identity Registrars (r:1 w:0)
    // Storage: Identity IdentityOf (r:1 w:1)
    fn request_judgement(r: u32, x: u32) -> Weight {
        Weight::from_ref_time(43_927_000 as u64)
            // Standard Error: 3_572_000
            .saturating_add(Weight::from_ref_time(817_000 as u64).saturating_mul(r as u64))
            // Standard Error: 396_000
            .saturating_add(Weight::from_ref_time(243_000 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity IdentityOf (r:1 w:1)
    fn cancel_request(r: u32, x: u32) -> Weight {
        Weight::from_ref_time(28_798_000 as u64)
            // Standard Error: 48_000
            .saturating_add(Weight::from_ref_time(224_000 as u64).saturating_mul(r as u64))
            // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(229_000 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_fee(_r: u32) -> Weight {
        Weight::from_ref_time(12_193_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_account_id(_r: u32) -> Weight {
        Weight::from_ref_time(12_905_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_fields(_r: u32) -> Weight {
        Weight::from_ref_time(12_995_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity Registrars (r:1 w:0)
    // Storage: Identity IdentityOf (r:1 w:1)
    fn provide_judgement(_r: u32, x: u32) -> Weight {
        Weight::from_ref_time(30_998_000 as u64)
            // Standard Error: 37_000
            .saturating_add(Weight::from_ref_time(352_000 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity IdentityOf (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    // Storage: Identity SuperOf (r:0 w:64)
    fn kill_identity(_r: u32, s: u32, _x: u32) -> Weight {
        Weight::from_ref_time(112_272_000 as u64)
            // Standard Error: 94_000
            .saturating_add(Weight::from_ref_time(309_000 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn add_sub(_s: u32) -> Weight {
        Weight::from_ref_time(43_604_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    fn rename_sub(_s: u32) -> Weight {
        Weight::from_ref_time(21_000_000 as u64)
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn remove_sub(_s: u32) -> Weight {
        Weight::from_ref_time(61_278_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn quit_sub(_s: u32) -> Weight {
        Weight::from_ref_time(43_864_000 as u64)
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
}
