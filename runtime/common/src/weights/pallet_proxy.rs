// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_proxy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions for pallet_proxy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::weights::WeightInfo for WeightInfo<T> {
    // Storage: Proxy Proxies (r:1 w:0)
    fn proxy(p: u32, ) -> Weight {
        Weight::from_ref_time(20_482_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(37_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn proxy_announced(a: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(38_387_000 as u64)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(117_000 as u64).saturating_mul(a as u64))
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(74_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn remove_announcement(a: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(27_422_000 as u64)
            // Standard Error: 13_000
            .saturating_add(Weight::from_ref_time(133_000 as u64).saturating_mul(a as u64))
            // Standard Error: 14_000
            .saturating_add(Weight::from_ref_time(7_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn reject_announcement(a: u32, _p: u32, ) -> Weight {
        Weight::from_ref_time(27_574_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(124_000 as u64).saturating_mul(a as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn announce(a: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(37_361_000 as u64)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(48_000 as u64).saturating_mul(a as u64))
            // Standard Error: 10_000
            .saturating_add(Weight::from_ref_time(47_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn add_proxy(p: u32, ) -> Weight {
        Weight::from_ref_time(28_699_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(80_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxy(p: u32, ) -> Weight {
        Weight::from_ref_time(28_890_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(79_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxies(p: u32, ) -> Weight {
        Weight::from_ref_time(25_017_000 as u64)
            // Standard Error: 7_000
            .saturating_add(Weight::from_ref_time(39_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
    // Storage: Proxy Proxies (r:1 w:1)
    fn anonymous(p: u32, ) -> Weight {
        Weight::from_ref_time(31_268_000 as u64)
            // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(23_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn kill_anonymous(p: u32, ) -> Weight {
        Weight::from_ref_time(25_774_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(50_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
}
